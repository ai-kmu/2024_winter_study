// 첫 번째 행과 첫 번째 열의 모든 셀로 가는 방법은 정확히 1가지

class Solution {
    public int uniquePaths(int m, int n) {
        // 모든 값을 1로 초기화한 2D 배열 생성
        
        int[][] dp = new int[m][n]; // 첫 번째 행과 첫 번째 열의 모든 셀로 가는 방법은 정확히 1가지
        
        for (int i = 0; i < m; i++) {
            dp[i][0] = 1;
        }
        for (int j = 0; j < n; j++) {
            dp[0][j] = 1;
        }

        // (1,1) 위치부터 배열 순회
        for (int i = 1; i < m; i++) { // @@@@@@@@@@@@@@@@@ 첫 번째 행과 첫 번째 열은 이미 초기화되어 있음 @@@@@@@@@@@
            for (int j = 1; j < n; j++) {
                // 현재 셀까지 도달하는 방법의 수 = sum(위쪽 셀에서 오는 경우, 왼쪽 셀에서 오는 경우)
                
                // dp
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }

        // 오른쪽 아래 모서리에 고유한 경로의 총 개수가 저장더ㅣㅁ
        return dp[m - 1][n - 1];
    }
}
